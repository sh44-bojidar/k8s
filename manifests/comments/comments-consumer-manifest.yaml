apiVersion: apps/v1
kind: Deployment
metadata:
  name: comments-consumer-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: comments-consumer-service
  template:
    metadata:
      labels:
        app: comments-consumer-service
    spec:
      containers:
        - name: comments-consumer-service
          image: sh44/comments-consumer-service:latest
          ports:
            - containerPort: 8085
          env:
            - name: MONGO_URL
              value: mongodb+srv://bojidarbac:H7lHnNnBeiYkD9xo@clustercomments.mcjset7.mongodb.net/?retryWrites=true&w=majority&appName=clusterComments
            - name: MONGO_DB
              value: sportspot
            - name: SPRING_RABBITMQ_HOST
              value: rabbitmq-service
            - name: EUREKA_CLIENT_SERVICEURL_DEFAULTZONE
              value: http://discovery-service:8761/eureka
          resources:
            limits:
              cpu: 500m # This the pod limit. When this limit is reached , the pod can't process more data. It does not crash, but starts working slowly.
            requests:
              cpu: 100m

---
apiVersion: v1
kind: Service
metadata:
  name: comments-consumer-service
spec:
  selector:
    app: comments-consumer-service
  ports:
    - name: http
      protocol: TCP
      port: 8085
      targetPort: 8085

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: comments-consumer-service
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: comments-consumer-service
  minReplicas: 3
  maxReplicas: 5
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 60 # Average CPU utilization - That triggers the pod scaling. Works with the pod CPU limits, when the pod starts consuming more CPU (%) of the node than the listed here (averageUtilization) new pod is generated.
